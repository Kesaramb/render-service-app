import { fabric } from 'fabric';
import { createCanvas } from 'canvas';
import { admin } from '../config/firebase';

interface RenderRequest {
  fabricData: any;
  width: number;
  height: number;
  format?: 'png' | 'jpeg' | 'webp';
  quality?: number;
  transparent?: boolean;
}

export class RenderService {
  async renderImage(request: RenderRequest): Promise<{ imageUrl: string; filename: string }> {
    const {
      fabricData,
      width,
      height,
      format = 'png',
      quality = 0.9,
      transparent = false
    } = request;

    let fabricCanvas: fabric.StaticCanvas | null = null;

    try {
      // Create node-canvas instance
      const nodeCanvasInstance = createCanvas(width, height);
      
      // Initialize Fabric.js StaticCanvas
      fabricCanvas = new fabric.StaticCanvas(null, { 
        enableRetinaScaling: false 
      });
      fabricCanvas.setDimensions({ width, height });
      (fabricCanvas as any).setNodeCanvas(nodeCanvasInstance);

      // Load template into canvas
      await new Promise<void>((resolve, reject) => {
        if (!fabricCanvas) {
          reject(new Error("Fabric canvas not initialized before loadFromJSON"));
          return;
        }
        
        fabricCanvas.loadFromJSON(fabricData, () => {
          if (!fabricCanvas) {
            reject(new Error("Fabric canvas became null during loadFromJSON callback"));
            return;
          }
          
          if (transparent) {
            fabricCanvas.setBackgroundColor('transparent', fabricCanvas.renderAll.bind(fabricCanvas));
          }
          
          fabricCanvas.renderAll();
          resolve();
        }, (o: any, object: fabric.Object) => {
          // Reviver function
        });
      });

      // Export to buffer
      const imageBuffer = (fabricCanvas as any).toBuffer(`image/${format}`, {
        quality: format === 'png' ? 1 : quality
      });

      // Upload to Firebase Storage
      const imageUrl = await this.uploadToStorage(imageBuffer, format);

      return { imageUrl, filename: `render_${Date.now()}.${format}` };

    } finally {
      if (fabricCanvas) {
        fabricCanvas.dispose();
      }
    }
  }

  private async uploadToStorage(imageBuffer: Buffer, format: string): Promise<string> {
    if (!admin.apps.length || !admin.app().options.projectId) {
      throw new Error("Firebase Admin SDK is not properly initialized. Cannot access Storage.");
    }

    const storage = admin.storage();
    const bucketName = process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || admin.app().options.storageBucket;

    if (!bucketName) {
      throw new Error("Firebase Storage bucket name is not configured.");
    }

    const bucket = storage.bucket(bucketName);
    
    // Using a simpler path for images generated by this service
    const imageFileName = `render-service-output/${Date.now()}.${format}`;
    const file = bucket.file(imageFileName);

    await file.save(imageBuffer, {
      metadata: { 
        contentType: `image/${format}`,
        cacheControl: 'public, max-age=31536000'
      },
      public: true,
      resumable: false,
    });
    
    await file.makePublic();
    
    return file.publicUrl();
  }
} 